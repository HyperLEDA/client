# generated by datamodel-codegen:
#   filename:  swagger.json
#   timestamp: 2025-05-09T16:25:20+00:00

from __future__ import annotations

from dataclasses import dataclass
from enum import Enum
from typing import Any

int_aliased = int
str_aliased = str


@dataclass
class AddDataRequestSchema:
    table_id: int_aliased
    data: list[dict[str, Any]]


@dataclass
class AddDataResponseSchema:
    pass


@dataclass
class CreateSourceRequestSchema:
    title: str_aliased
    authors: list[str_aliased]
    year: int_aliased


@dataclass
class CreateSourceResponseSchema:
    code: str_aliased


class DataType(Enum):
    str = "str"
    string = "string"
    character_varying = "character varying"
    text = "text"
    character = "character"
    char = "char"
    short = "short"
    int = "int"
    long = "long"
    integer = "integer"
    smallint = "smallint"
    float = "float"
    double = "double"
    double_precision = "double precision"
    real = "real"
    timestamp_without_time_zone = "timestamp without time zone"


@dataclass
class ColumnDescription:
    name: str_aliased
    data_type: DataType
    unit: str_aliased | None = None
    ucd: str_aliased | None = None
    description: str_aliased | None = ""


class Datatype(Enum):
    regular = "regular"
    reprocessing = "reprocessing"
    preliminary = "preliminary"
    compilation = "compilation"


@dataclass
class CreateTableRequestSchema:
    table_name: str_aliased
    columns: list[ColumnDescription]
    bibcode: str_aliased
    datatype: Datatype | None = Datatype.regular
    description: str_aliased | None = ""


@dataclass
class CreateTableResponseSchema:
    id: int_aliased


@dataclass
class GetTableValidationRequestSchema:
    table_name: str_aliased


@dataclass
class TableValidation:
    message: str_aliased | None = None
    validator: str_aliased | None = None


@dataclass
class GetTableValidationResponseSchema:
    validations: list[TableValidation] | None = None


@dataclass
class PatchTableAction:
    pass


@dataclass
class PatchTableRequestSchema:
    table_name: str_aliased
    actions: list[PatchTableAction]


@dataclass
class PatchTableResponseSchema:
    pass


@dataclass
class GetTaskInfoRequestSchema:
    task_id: int_aliased


@dataclass
class GetTaskInfoResponseSchema:
    id: int_aliased | None = None
    task_name: str_aliased | None = None
    status: str_aliased | None = None
    payload: dict[str, Any] | None = None
    start_time: str_aliased | None = None
    end_time: str_aliased | None = None
    message: dict[str, Any] | None = None


@dataclass
class LoginRequestSchema:
    username: str_aliased
    password: str_aliased


@dataclass
class LoginResponseSchema:
    token: str | None = None


@dataclass
class Overrides:
    id: str
    pgc: int | None = None


@dataclass
class SetTableStatusRequestSchema:
    table_id: int
    overrides: list[Overrides] | None = None


@dataclass
class SetTableStatusResponseSchema:
    pass


@dataclass
class CrossIdentification:
    inner_radius_arcsec: float | None = 1.5
    outer_radius_arcsec: float | None = 3.0


@dataclass
class TableProcessRequestSchema:
    table_id: int
    cross_identification: CrossIdentification | None = None


@dataclass
class TableProcessResponseSchema:
    pass


@dataclass
class TableStatusStatsRequestSchema:
    table_id: int_aliased


@dataclass
class TableStatusStatsResponseSchema:
    processing: dict[str, int_aliased] | None = None


@dataclass
class Parameter:
    column_name: str_aliased
    enrichment: dict[str, Any] | None = None


class Name(Enum):
    icrs = "icrs"
    designation = "designation"
    redshift = "redshift"


@dataclass
class Catalog:
    name: Name
    parameters: dict[str, Parameter]
    key: str_aliased | None = None
    additional_params: dict[str, Any] | None = None


@dataclass
class CreateMarkingRequestSchema:
    table_name: str_aliased
    catalogs: list[Catalog]


@dataclass
class CreateMarkingResponseSchema:
    pass
